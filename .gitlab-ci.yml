# This template uses the latest Maven 3 release, e.g., 3.8.6, and OpenJDK 11 (LTS)
# for verifying and deploying images
# Maven 3.8.x REQUIRES HTTPS repositories.
# See https://maven.apache.org/docs/3.8.1/release-notes.html#how-to-fix-when-i-get-a-http-repository-blocked for more.
image: maven:3.8.6-openjdk-11-slim

stages:
  #  - deploy-test
  - build
  - deploy
  - restart
  - notify

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
# Be aware that `mvn deploy` will install the built jar into this repository. If you notice your cache size
# increasing, consider adding `-Dmaven.install.skip=true` to `MAVEN_OPTS` or in `.mvn/maven.config`
#default:
#  cache:
#    paths:
#      - .m2/repository
#    # keep cache across branch
#    key: '$CI_JOB_NAME'

# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml

# Build JAVA applications using Apache Maven (http://maven.apache.org)
# For docker image tags see https://hub.docker.com/_/maven/
#
# For general lifecycle information see https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html

# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

variables:
  PROJECT_URL: https://v220.uz
  STAGE_NAME: build
  # default values
  DEPLOY_PORT: 22
  DEPLOY_PATH: /data/jars/other/

  # Telegram
  SUCCESS_TG_USER: '@solverman'
  FAILURE_TG_USER: '@solverman'
  TELEGRAM_USER_ID: -802254094
  TELEGRAM_BOT_TOKEN: 865694832:AAHcXxECy5PWCelGpiAj68Hoh3KqlJLN57U

  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true
    -Dlogging.level.root=WARN

  # As of Maven 3.3.0 instead of this you MAY define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # As of Maven 3.6.1, the use of `--no-tranfer-progress` (or `-ntp`) suppresses download and upload messages. The use
  # of the `Slf4jMavenTransferListener` is no longer necessary.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    -DinstallAtEnd=true
    -DdeployAtEnd=true

build:
  stage: build
  #  tags:
  #    - gitlab_shared_runner
  script:
    - STAGE_NAME=$CI_JOB_STAGE
    # maven's finalName is overrided by custom prop where suffix is commitShortSha prop
    - mvn clean
    - mvn package -DskipTests -Pprod -DcommitShortSha=${CI_COMMIT_SHORT_SHA} $MAVEN_CLI_OPTS # maven's finalName is override by custom prop where suffix is commitShortSha prop
  artifacts:
    paths:
      - target/*.jar
    expire_in: 2 week
  except:
    - tests

.prepare-connections: &prepare-connections
  - STAGE_NAME=$CI_JOB_STAGE
  # INSTALL SSH AND CONFIGURE KEYS
  - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
  - echo -e "Host $SSH_HOST\n\tPort $DEPLOY_PORT\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - chmod 600 ~/.ssh/config

deploy:
  stage: deploy
  image: kroniak/ssh-client
  before_script:
    - *prepare-connections
  script:
    - scp -v target/*.jar $SSH_USER@$SSH_HOST:$DEPLOY_PATH
  only:
    - master
    - bugs/ui-fixes-needed
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/

restart:
  stage: restart
  image: kroniak/ssh-client
  before_script:
    - *prepare-connections
  script:
    - ssh $SSH_USER@$SSH_HOST "kubectl delete pod -n other v220-0"
  only:
    - master
    - bugs/ui-fixes-needed
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/

################################

.notify: &notify
  # https://ifedyukin.ru/blog/2018/telegram_ci
  #  - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then PROJECT_URL=$PROD_PROJECT_URL; else PROJECT_URL=$QA_PROJECT_URL; fi
  - TIME="10"
  - URL="https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"
  - TEXT="$STAGE_NAME status:$STATUS_TEXT %0A%0A Project:+$CI_PROJECT_NAME%0A User:+$GITLAB_USER_LOGIN%0A Branch:+$CI_COMMIT_REF_SLUG%0A Message:+$CI_COMMIT_MESSAGE%0A Project URL:+$PROJECT_URL%0A Pipeline URL:+$CI_PROJECT_URL/pipelines/$CI_PIPELINE_ID"
  - curl -s --max-time $TIME -d "chat_id=$TELEGRAM_USER_ID&disable_web_page_preview=1&text=$TEXT" $URL > /dev/null

# Notify SUCCESS only if on success and commit message does not contain (skip-ci OR skip-deploy OR skip-restart)
notify-success:
  stage: notify
  script:
    - STATUS_TEXT="✅👍👍👍✅"
    - *notify
  when: on_success #deploy OK
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/

# Notify only if commit message contains (skip-ci)
notify-skip:
  stage: notify
  script:
    - STATUS_TEXT="Built OK ✅, but Deploy and Restart skipped ➡"
    - *notify
  when: on_success #deploy OK
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /skip-deploy/

notify-error:
  stage: notify
  script:
    - STATUS_TEXT="❌😡🤦🤦❌"
    - *notify
  when: on_failure #deploy failed
